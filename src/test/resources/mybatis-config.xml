<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

  <properties>
    <property name="jdbc.username" value="test" />
    <property name="jdbc.password" value="test" />
  </properties>

  <!--<settings>-->
    <!-- 这个配置使全局的映射器启用或禁用 【缓存】 -->
   <!-- <setting name="cacheEnabled" value="true" />-->

    <!-- 全局启用或禁用【延迟加载】。当禁用时，所有关联对象都会即时加载 -->
  <!--  <setting name="lazyLoadingEnabled" value="true" />-->

    <!-- 允许或不允许多种结果集从一个单独的语句中返回（需要适合的驱动才有效） -->
   <!-- <setting name="multipleResultSetsEnabled" value="true" />-->

    <!-- 使用列标签代替列名。不同的驱动在这方便表现不同。参考驱动文档或充分测试两种方法来决定所使用的驱动 -->
  <!--  <setting name="useColumnLabel" value="true" />-->

    <!-- 允许JDBC支持【id自动生成】。需要适合的驱动。 -->
   <!-- <setting name="useGeneratedKeys" value="false" />-->

    <!-- 指定MyBatis如何【自动映射】列到 列/属性值。PARTIAL只会自动映射简单、没有嵌套的结果。FULL会自动映射任意复杂的结果（嵌套的或其他情况） -->
   <!-- <setting name="autoMappingBehavior" value="PARTIAL" />-->

    <!-- 配置默认的执行器。SIMPLE执行器没有什么特别之处。REUSE执行器重用预处理语句。BATCH【执行器】重用语句和批量更新 -->
  <!--  <setting name="defaultExecutorType" value="SIMPLE" />-->

    <!-- 设置【超时时间】，它决定驱动等待一个数据库响应的时间 -->
   <!-- <setting name="defaultStatementTimeout" value="25000" />-->

    <!-- 在嵌套语句中使用【分页功能】（RowBounds），默认false -->
  <!--  <setting name="safeRowBoundsEnabled" value="false" />
-->
    <!-- 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。默认false -->
  <!--  <setting name="mapUnderscoreToCamelCase" value="false" />-->

    <!-- MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。 -->
   <!-- <setting name="localCacheScope" value="SESSION" />-->

    <!-- 当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。 -->
    <!--<setting name="jdbcTypeForNull" value="OTHER" />-->

    <!-- 指定对象的哪个方法【触发一次延迟加载】。 -->
 <!--   <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode ,toString" />-->

    <!-- CGLIB | JAVASSIST 默认JAVASSIST(MyBatis 3.3 or above)  -->
    <!-- 指定 Mybatis 创建具有延迟加载能力的对象所用到的【代理工具】。 -->
  <!--  <setting name="proxyFactory" value="JAVASSIST" />-->
    <!-- 当启用时，对任意延迟属性的调用会使带有延迟加载属性的对象完整加载；反之，每种属性将会按需加载。 -->
   <!-- <setting name="aggressiveLazyLoading" value="true" />-->

    <!-- 指定 MyBatis 所用日志的具体实现，未指定时将自动查找。 -->
   <!-- <setting name="logImpl" value="LOG4J " />-->

    <!-- 指定 MyBatis 增加到日志名称的前缀。值可以是任意字符串 -->
  <!--  <setting name="logPrefix" value="LOG4J " />-->

    <!-- 指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这对于有 Map.keySet() 依赖或 null 值初始化的时候是有用的。注意基本类型（int、boolean等）是不能设置成 null 的。 默认false-->
 <!--   <setting name="callSettersOnNulls" value="false " />-->
 <!-- </settings>-->

  <!--注意：别名【不区分大小写】。-->
  <typeAliases>
    <package name="com.sirius.mybatis.entity"/>
   <!-- <typeAlias alias="User" type="com.sirius.mybatis.entity.User" />-->
  </typeAliases>

 <!-- typeHandlers标签用来设置类型处理器，在执行sql语句的时候，prepareStatement会设置sql语句中的 ? 值
  （如select * from student where id = ?），此时类型处理器帮prepareStatement找到对应的set方法，
  如setInt、setString或setDate等，但是如果是自定义的类型，类型处理器就找不到对应的set方法，所以要自定义类型处理器。-->

<!--  <typeHandlers>
    <typeHandler handler="com.au.typehandlers.PhoneTypeHandler" />
  </typeHandlers>-->

<!--  <plugins>
    <plugin interceptor="com.itheima.interceptor.MyPlugin">
      <property name="someProperty" value="100"/>
    </plugin>
  </plugins>-->

  <!-- 数据源配置 -->
  <environments default="development">
    <environment id="development">
      <!-- 使用jdbc事务管理器 -->
      <transactionManager type="JDBC"/>
      <!-- 数据库连接池-->
      <dataSource type="POOLED">
        <property name="driver" value="com.mysql.cj.jdbc.Driver"/>
        <!--<property name="driver" value="com.mysql.jdbc.Driver"/>-->
        <property name="url" value="jdbc:mysql://mysql.sirius.com:33306/mybatis"/>
        <property name="username" value="root"/>
        <property name="password" value="cpwl123456"/>
      </dataSource>
    </environment>
  </environments>

  <mappers>
    <mapper resource="mapper/UserMapper.xml"/>
    <mapper resource="mapper/CommonMapper.xml"/>
  </mappers>
</configuration>
